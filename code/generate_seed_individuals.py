'''
This file generates the seed individuals used for the tests with the Sphere, Rastrigin, and Rosenbrock functions. It requires the initial populations generated by "generate_initial_populations.py".
'''
import os
import math
import warnings

import numpy as np
import pandas as pd

from scipy import optimize

from pymoo.core.problem import Problem

from problems.MACO import MACO
from pymoo.problems.multi.zdt import ZDT1, ZDT2, ZDT3
from pymoo.problems.many.dtlz import DTLZ1, DTLZ2, DTLZ3


#check if the output path exists
out_path = "../data/seed_individuals"
if not os.path.exists(out_path):
   os.makedirs(out_path)

#set the randon seed
np.random.seed(1)


n_var = 10

def save_dataframe(seed_genomes:list, random_genomes:list, problem:Problem, problem_name:str, seed_types:list, random_types:list):
    '''
    Save the seed ind combinations for 2 objectives to a csv file.

    Parameters:
    -----------
    seed_genomes: list of np.arrays
        The genomes of the seed individuals. The last element is always the center, the first elements always the extreme solutions.
    random_genomes: list of np.arrays
        The genomes of the random individuals.
    problem: pymoo.core.problem
        The problem the seed inds are generated for.
    problem_name: str
        The name of the problem the seed inds are generated for.
    seed_types: list of str
        The types of the seed individuals (extreme or center).
    random_types: list of str
        The types of the random individuals (1-4).
    '''
    #evaluate the genomes
    seed_inds_f = [ problem.evaluate(ind) for ind in seed_genomes ]
    random_inds_f = [ problem.evaluate(ind) for ind in random_genomes ]

    #set up the dataframe:
    df_columns = ["gene_"+str(i+1) for i in range(problem.n_var)] + ["obj_"+str(i+1) for i in range(problem.n_obj)] + ["type"]
    seed_inds_df = pd.DataFrame(columns=df_columns, dtype=str)
    #save the seed types:
    for i in range(len(seed_types)):
        seed_inds_df.loc[len(seed_inds_df)+1] = list(seed_genomes[i]) + list(seed_inds_f[i]) + [seed_types[i]]
    #save the random types:
    for i in range(len(random_types)):
        seed_inds_df.loc[len(seed_inds_df)+1] = list(random_genomes[i]) + list(random_inds_f[i]) + [random_types[i]]
    seed_inds_df.to_csv(out_path + "/seed_individuals_" + problem_name + ".csv")

#generate three random inds
random_inds_x = [
    np.random.random(n_var),
    np.random.random(n_var),
    np.random.random(n_var),
    np.random.random(n_var) #TODO: do I need four inds?
    ]
random_types = ["r1", "r2", "r3", "r4"]

#MACO ============================================================================================================================================================
MACO_inds_x = [
    np.zeros(n_var), #extreme 1
    np.linspace(0,1,n_var), #extreme 2
    np.linspace(0,0.5,n_var), #center
    ]
MACO_seed_types = ["e1", "e2", "c"]

#problems
MACO_b = MACO(n_var = n_var)
MACO_p_10 = MACO(n_var = n_var, p=-10)
MACO_w_shallow = MACO(n_var = n_var, wtype="shallow")
MACO_w_steep = MACO(n_var = n_var, wtype="steep")

save_dataframe(MACO_inds_x, random_inds_x, MACO_b, "MACO_b", MACO_seed_types, random_types)
save_dataframe(MACO_inds_x, random_inds_x, MACO_p_10, "MACO_p=-10", MACO_seed_types, random_types)
save_dataframe(MACO_inds_x, random_inds_x, MACO_w_shallow, "MACO_w=shallow", MACO_seed_types, random_types)
save_dataframe(MACO_inds_x, random_inds_x, MACO_w_steep, "MACO_w=steep", MACO_seed_types, random_types)


#ZDT ============================================================================================================================================================
ZDT_e1 = np.zeros(n_var)
ZDT_e2 = np.zeros(n_var)
ZDT_c = np.zeros(n_var)
ZDT_e2[0] = 1.0
ZDT_c[0] = 0.5
ZDT_inds_x = [
    ZDT_e1,
    ZDT_e2,
    ZDT_c,
]
ZDT_seed_types = ["e1", "e2", "c"]


#problems
ZDT1 = ZDT1(n_var = n_var)
ZDT2 = ZDT2(n_var = n_var)
ZDT3 = ZDT3(n_var = n_var)

#save DFs
save_dataframe(ZDT_inds_x, random_inds_x, ZDT1, "ZDT1", ZDT_seed_types, random_types)
save_dataframe(ZDT_inds_x, random_inds_x, ZDT2, "ZDT2", ZDT_seed_types, random_types)
save_dataframe(ZDT_inds_x, random_inds_x, ZDT3, "ZDT3", ZDT_seed_types, random_types)


#DTLZ ============================================================================================================================================================
DTLZ_e1 = np.array([0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5])
DTLZ_e2 = np.array([1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5])
DTLZ_e3 = np.array([0.0, 1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5])
DTLZ_c = np.ones(n_var) * 0.5
DTLZ_inds_x = [
    DTLZ_e1,
    DTLZ_e2,
    DTLZ_e3,
    DTLZ_c,
]
DTLZ_seed_types = ["e1", "e2", "e3", "c"]


#problems
DTLZ1 = DTLZ1(n_var = n_var, n_obj = 3)
DTLZ2 = DTLZ2(n_var = n_var, n_obj = 3)
DTLZ3 = DTLZ3(n_var = n_var, n_obj = 3)

#save DFs
save_dataframe(DTLZ_inds_x, random_inds_x, DTLZ1, "DTLZ1", DTLZ_seed_types, random_types)
save_dataframe(DTLZ_inds_x, random_inds_x, DTLZ2, "DTLZ2", DTLZ_seed_types, random_types)
save_dataframe(DTLZ_inds_x, random_inds_x, DTLZ3, "DTLZ3", DTLZ_seed_types, random_types)